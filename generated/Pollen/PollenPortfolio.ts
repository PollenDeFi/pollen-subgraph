// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Executed extends ethereum.Event {
  get params(): Executed__Params {
    return new Executed__Params(this);
  }
}

export class Executed__Params {
  _event: Executed;

  constructor(event: Executed) {
    this._event = event;
  }

  get proposalId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class PaiPrice extends ethereum.Event {
  get params(): PaiPrice__Params {
    return new PaiPrice__Params(this);
  }
}

export class PaiPrice__Params {
  _event: PaiPrice;

  constructor(event: PaiPrice) {
    this._event = event;
  }

  get price(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class Redeemed extends ethereum.Event {
  get params(): Redeemed__Params {
    return new Redeemed__Params(this);
  }
}

export class Redeemed__Params {
  _event: Redeemed;

  constructor(event: Redeemed) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get paiAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class PollenPortfolio__getBalancesResult {
  value0: Array<Address>;
  value1: Array<BigInt>;

  constructor(value0: Array<Address>, value1: Array<BigInt>) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddressArray(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigIntArray(this.value1));
    return map;
  }
}

export class PollenPortfolio extends ethereum.SmartContract {
  static bind(address: Address): PollenPortfolio {
    return new PollenPortfolio("PollenPortfolio", address);
  }

  getPaiAddress(): Address {
    let result = super.call("getPaiAddress", "getPaiAddress():(address)", []);

    return result[0].toAddress();
  }

  try_getPaiAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getPaiAddress",
      "getPaiAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getBalances(): PollenPortfolio__getBalancesResult {
    let result = super.call(
      "getBalances",
      "getBalances():(address[],uint256[])",
      []
    );

    return new PollenPortfolio__getBalancesResult(
      result[0].toAddressArray(),
      result[1].toBigIntArray()
    );
  }

  try_getBalances(): ethereum.CallResult<PollenPortfolio__getBalancesResult> {
    let result = super.tryCall(
      "getBalances",
      "getBalances():(address[],uint256[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PollenPortfolio__getBalancesResult(
        value[0].toAddressArray(),
        value[1].toBigIntArray()
      )
    );
  }

  getRateQuoterAddress(): Address {
    let result = super.call(
      "getRateQuoterAddress",
      "getRateQuoterAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getRateQuoterAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getRateQuoterAddress",
      "getRateQuoterAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getPaiPrice(): BigInt {
    let result = super.call("getPaiPrice", "getPaiPrice():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getPaiPrice(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getPaiPrice", "getPaiPrice():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class GetPaiPriceCall extends ethereum.Call {
  get inputs(): GetPaiPriceCall__Inputs {
    return new GetPaiPriceCall__Inputs(this);
  }

  get outputs(): GetPaiPriceCall__Outputs {
    return new GetPaiPriceCall__Outputs(this);
  }
}

export class GetPaiPriceCall__Inputs {
  _call: GetPaiPriceCall;

  constructor(call: GetPaiPriceCall) {
    this._call = call;
  }
}

export class GetPaiPriceCall__Outputs {
  _call: GetPaiPriceCall;

  constructor(call: GetPaiPriceCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class ExecuteCall extends ethereum.Call {
  get inputs(): ExecuteCall__Inputs {
    return new ExecuteCall__Inputs(this);
  }

  get outputs(): ExecuteCall__Outputs {
    return new ExecuteCall__Outputs(this);
  }
}

export class ExecuteCall__Inputs {
  _call: ExecuteCall;

  constructor(call: ExecuteCall) {
    this._call = call;
  }

  get proposalId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class ExecuteCall__Outputs {
  _call: ExecuteCall;

  constructor(call: ExecuteCall) {
    this._call = call;
  }
}

export class RedeemCall extends ethereum.Call {
  get inputs(): RedeemCall__Inputs {
    return new RedeemCall__Inputs(this);
  }

  get outputs(): RedeemCall__Outputs {
    return new RedeemCall__Outputs(this);
  }
}

export class RedeemCall__Inputs {
  _call: RedeemCall;

  constructor(call: RedeemCall) {
    this._call = call;
  }

  get paiAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RedeemCall__Outputs {
  _call: RedeemCall;

  constructor(call: RedeemCall) {
    this._call = call;
  }
}
