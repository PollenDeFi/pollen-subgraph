// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Proposal extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Proposal entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Proposal entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Proposal", id.toString(), this);
  }

  static load(id: string): Proposal | null {
    return store.get("Proposal", id) as Proposal | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get proposalType(): string {
    let value = this.get("proposalType");
    return value.toString();
  }

  set proposalType(value: string) {
    this.set("proposalType", Value.fromString(value));
  }

  get assetTokenType(): string {
    let value = this.get("assetTokenType");
    return value.toString();
  }

  set assetTokenType(value: string) {
    this.set("assetTokenType", Value.fromString(value));
  }

  get assetTokenAddress(): Bytes {
    let value = this.get("assetTokenAddress");
    return value.toBytes();
  }

  set assetTokenAddress(value: Bytes) {
    this.set("assetTokenAddress", Value.fromBytes(value));
  }

  get assetTokenAmount(): BigDecimal {
    let value = this.get("assetTokenAmount");
    return value.toBigDecimal();
  }

  set assetTokenAmount(value: BigDecimal) {
    this.set("assetTokenAmount", Value.fromBigDecimal(value));
  }

  get pollenAmount(): BigDecimal {
    let value = this.get("pollenAmount");
    return value.toBigDecimal();
  }

  set pollenAmount(value: BigDecimal) {
    this.set("pollenAmount", Value.fromBigDecimal(value));
  }

  get description(): string {
    let value = this.get("description");
    return value.toString();
  }

  set description(value: string) {
    this.set("description", Value.fromString(value));
  }

  get submitter(): Bytes {
    let value = this.get("submitter");
    return value.toBytes();
  }

  set submitter(value: Bytes) {
    this.set("submitter", Value.fromBytes(value));
  }

  get yesVotes(): BigDecimal {
    let value = this.get("yesVotes");
    return value.toBigDecimal();
  }

  set yesVotes(value: BigDecimal) {
    this.set("yesVotes", Value.fromBigDecimal(value));
  }

  get noVotes(): BigDecimal {
    let value = this.get("noVotes");
    return value.toBigDecimal();
  }

  set noVotes(value: BigDecimal) {
    this.set("noVotes", Value.fromBigDecimal(value));
  }

  get votingExpiry(): BigInt {
    let value = this.get("votingExpiry");
    return value.toBigInt();
  }

  set votingExpiry(value: BigInt) {
    this.set("votingExpiry", Value.fromBigInt(value));
  }

  get executionOpen(): BigInt {
    let value = this.get("executionOpen");
    return value.toBigInt();
  }

  set executionOpen(value: BigInt) {
    this.set("executionOpen", Value.fromBigInt(value));
  }

  get executionExpiry(): BigInt {
    let value = this.get("executionExpiry");
    return value.toBigInt();
  }

  set executionExpiry(value: BigInt) {
    this.set("executionExpiry", Value.fromBigInt(value));
  }

  get status(): string {
    let value = this.get("status");
    return value.toString();
  }

  set status(value: string) {
    this.set("status", Value.fromString(value));
  }
}
