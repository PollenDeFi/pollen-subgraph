// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Proposal extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Proposal entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Proposal entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Proposal", id.toString(), this);
  }

  static load(id: string): Proposal | null {
    return store.get("Proposal", id) as Proposal | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get proposalType(): string {
    let value = this.get("proposalType");
    return value.toString();
  }

  set proposalType(value: string) {
    this.set("proposalType", Value.fromString(value));
  }

  get assetToken(): string {
    let value = this.get("assetToken");
    return value.toString();
  }

  set assetToken(value: string) {
    this.set("assetToken", Value.fromString(value));
  }

  get assetTokenAmount(): BigDecimal {
    let value = this.get("assetTokenAmount");
    return value.toBigDecimal();
  }

  set assetTokenAmount(value: BigDecimal) {
    this.set("assetTokenAmount", Value.fromBigDecimal(value));
  }

  get pollenAmount(): BigDecimal {
    let value = this.get("pollenAmount");
    return value.toBigDecimal();
  }

  set pollenAmount(value: BigDecimal) {
    this.set("pollenAmount", Value.fromBigDecimal(value));
  }

  get description(): string {
    let value = this.get("description");
    return value.toString();
  }

  set description(value: string) {
    this.set("description", Value.fromString(value));
  }

  get submitter(): Bytes {
    let value = this.get("submitter");
    return value.toBytes();
  }

  set submitter(value: Bytes) {
    this.set("submitter", Value.fromBytes(value));
  }

  get snapshot(): string {
    let value = this.get("snapshot");
    return value.toString();
  }

  set snapshot(value: string) {
    this.set("snapshot", Value.fromString(value));
  }

  get yesVotes(): BigDecimal {
    let value = this.get("yesVotes");
    return value.toBigDecimal();
  }

  set yesVotes(value: BigDecimal) {
    this.set("yesVotes", Value.fromBigDecimal(value));
  }

  get noVotes(): BigDecimal {
    let value = this.get("noVotes");
    return value.toBigDecimal();
  }

  set noVotes(value: BigDecimal) {
    this.set("noVotes", Value.fromBigDecimal(value));
  }

  get votingExpiry(): BigInt {
    let value = this.get("votingExpiry");
    return value.toBigInt();
  }

  set votingExpiry(value: BigInt) {
    this.set("votingExpiry", Value.fromBigInt(value));
  }

  get executionOpen(): BigInt {
    let value = this.get("executionOpen");
    return value.toBigInt();
  }

  set executionOpen(value: BigInt) {
    this.set("executionOpen", Value.fromBigInt(value));
  }

  get executionExpiry(): BigInt {
    let value = this.get("executionExpiry");
    return value.toBigInt();
  }

  set executionExpiry(value: BigInt) {
    this.set("executionExpiry", Value.fromBigInt(value));
  }

  get status(): string {
    let value = this.get("status");
    return value.toString();
  }

  set status(value: string) {
    this.set("status", Value.fromString(value));
  }

  get votePassed(): boolean {
    let value = this.get("votePassed");
    return value.toBoolean();
  }

  set votePassed(value: boolean) {
    this.set("votePassed", Value.fromBoolean(value));
  }

  get executedAt(): BigInt | null {
    let value = this.get("executedAt");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set executedAt(value: BigInt | null) {
    if (value === null) {
      this.unset("executedAt");
    } else {
      this.set("executedAt", Value.fromBigInt(value as BigInt));
    }
  }
}

export class Snapshot extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Snapshot entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Snapshot entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Snapshot", id.toString(), this);
  }

  static load(id: string): Snapshot | null {
    return store.get("Snapshot", id) as Snapshot | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get pollenSupply(): BigDecimal {
    let value = this.get("pollenSupply");
    return value.toBigDecimal();
  }

  set pollenSupply(value: BigDecimal) {
    this.set("pollenSupply", Value.fromBigDecimal(value));
  }
}

export class AssetToken extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save AssetToken entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save AssetToken entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("AssetToken", id.toString(), this);
  }

  static load(id: string): AssetToken | null {
    return store.get("AssetToken", id) as AssetToken | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get type(): string {
    let value = this.get("type");
    return value.toString();
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }

  get daoBalance(): BigDecimal {
    let value = this.get("daoBalance");
    return value.toBigDecimal();
  }

  set daoBalance(value: BigDecimal) {
    this.set("daoBalance", Value.fromBigDecimal(value));
  }
}

export class Portfolio extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Portfolio entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Portfolio entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Portfolio", id.toString(), this);
  }

  static load(id: string): Portfolio | null {
    return store.get("Portfolio", id) as Portfolio | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get contract(): Bytes {
    let value = this.get("contract");
    return value.toBytes();
  }

  set contract(value: Bytes) {
    this.set("contract", Value.fromBytes(value));
  }

  get assets(): Array<string> | null {
    let value = this.get("assets");
    if (value === null) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set assets(value: Array<string> | null) {
    if (value === null) {
      this.unset("assets");
    } else {
      this.set("assets", Value.fromStringArray(value as Array<string>));
    }
  }
}

export class Governance extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Governance entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Governance entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Governance", id.toString(), this);
  }

  static load(id: string): Governance | null {
    return store.get("Governance", id) as Governance | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get holdings(): Array<string> | null {
    let value = this.get("holdings");
    if (value === null) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set holdings(value: Array<string> | null) {
    if (value === null) {
      this.unset("holdings");
    } else {
      this.set("holdings", Value.fromStringArray(value as Array<string>));
    }
  }

  get totalDistributed(): BigDecimal {
    let value = this.get("totalDistributed");
    return value.toBigDecimal();
  }

  set totalDistributed(value: BigDecimal) {
    this.set("totalDistributed", Value.fromBigDecimal(value));
  }

  get awaitingDistribution(): BigDecimal {
    let value = this.get("awaitingDistribution");
    return value.toBigDecimal();
  }

  set awaitingDistribution(value: BigDecimal) {
    this.set("awaitingDistribution", Value.fromBigDecimal(value));
  }

  get earnedRewards(): Array<string> | null {
    let value = this.get("earnedRewards");
    if (value === null) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set earnedRewards(value: Array<string> | null) {
    if (value === null) {
      this.unset("earnedRewards");
    } else {
      this.set("earnedRewards", Value.fromStringArray(value as Array<string>));
    }
  }

  get earnableRewards(): Array<string> | null {
    let value = this.get("earnableRewards");
    if (value === null) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set earnableRewards(value: Array<string> | null) {
    if (value === null) {
      this.unset("earnableRewards");
    } else {
      this.set(
        "earnableRewards",
        Value.fromStringArray(value as Array<string>)
      );
    }
  }
}

export class GovTokenHoldings extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save GovTokenHoldings entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save GovTokenHoldings entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("GovTokenHoldings", id.toString(), this);
  }

  static load(id: string): GovTokenHoldings | null {
    return store.get("GovTokenHoldings", id) as GovTokenHoldings | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get totalDistributed(): BigDecimal {
    let value = this.get("totalDistributed");
    return value.toBigDecimal();
  }

  set totalDistributed(value: BigDecimal) {
    this.set("totalDistributed", Value.fromBigDecimal(value));
  }

  get awaitingDistribution(): BigDecimal {
    let value = this.get("awaitingDistribution");
    return value.toBigDecimal();
  }

  set awaitingDistribution(value: BigDecimal) {
    this.set("awaitingDistribution", Value.fromBigDecimal(value));
  }
}

export class EarnedReward extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save EarnedReward entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save EarnedReward entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("EarnedReward", id.toString(), this);
  }

  static load(id: string): EarnedReward | null {
    return store.get("EarnedReward", id) as EarnedReward | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get receiver(): Bytes {
    let value = this.get("receiver");
    return value.toBytes();
  }

  set receiver(value: Bytes) {
    this.set("receiver", Value.fromBytes(value));
  }

  get amount(): BigDecimal {
    let value = this.get("amount");
    return value.toBigDecimal();
  }

  set amount(value: BigDecimal) {
    this.set("amount", Value.fromBigDecimal(value));
  }

  get distributed(): boolean {
    let value = this.get("distributed");
    return value.toBoolean();
  }

  set distributed(value: boolean) {
    this.set("distributed", Value.fromBoolean(value));
  }

  get type(): string {
    let value = this.get("type");
    return value.toString();
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }

  get earnedAt(): BigInt {
    let value = this.get("earnedAt");
    return value.toBigInt();
  }

  set earnedAt(value: BigInt) {
    this.set("earnedAt", Value.fromBigInt(value));
  }
}

export class EarnableReward extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save EarnableReward entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save EarnableReward entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("EarnableReward", id.toString(), this);
  }

  static load(id: string): EarnableReward | null {
    return store.get("EarnableReward", id) as EarnableReward | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get type(): string {
    let value = this.get("type");
    return value.toString();
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }

  get amount(): BigDecimal {
    let value = this.get("amount");
    return value.toBigDecimal();
  }

  set amount(value: BigDecimal) {
    this.set("amount", Value.fromBigDecimal(value));
  }
}
